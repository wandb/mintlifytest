name: Generate Reference Documentation

on:
  workflow_dispatch:
    inputs:
      weave_version:
        description: 'Weave version (e.g., "latest", "0.51.34", "v0.51.34", commit SHA, or branch name)'
        required: false
        default: 'latest'
      create_pr:
        description: 'Create a pull request with the changes'
        required: true
        type: boolean
        default: true
  
  # TEMPORARY: Push trigger for testing - REMOVE BEFORE MERGING
  push:
    branches:
      - feature/reference-docs-generation-v2

jobs:
  generate-docs:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Parse version from PR description (push trigger only)
      if: ${{ github.event_name == 'push' }}
      id: parse-pr
      uses: actions/github-script@v7
      with:
        script: |
          // Get PR number from the push event
          const { data: prs } = await github.rest.pulls.list({
            owner: context.repo.owner,
            repo: context.repo.repo,
            head: `${context.repo.owner}:${context.ref.replace('refs/heads/', '')}`,
            state: 'open'
          });
          
          if (prs.length > 0) {
            const pr = prs[0];
            const body = pr.body || '';
            
            // Look for version specification in PR body
            // Format: WEAVE_VERSION: 0.51.34
            const match = body.match(/WEAVE_VERSION:\s*(\S+)/);
            const version = match ? match[1] : 'latest';
            
            console.log(`Found PR #${pr.number} with version: ${version}`);
            core.setOutput('weave_version', version);
            core.setOutput('pr_number', pr.number.toString());
          } else {
            console.log('No open PR found for this branch');
            core.setOutput('weave_version', 'latest');
          }
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Cache Python dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('scripts/reference-generation/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install requests for Service API generation
      run: |
        pip install requests
        
    - name: Check if documentation needs regeneration
      id: version-check
      run: |
        # Get the version we're about to build
        if [ "${{ github.event_name }}" == "push" ]; then
          VERSION="${{ steps.parse-pr.outputs.weave_version }}"
        else
          VERSION="${{ github.event.inputs.weave_version }}"
        fi
        
        # Check if we have a version file from previous builds
        if [ -f ".weave-docs-version" ]; then
          LAST_VERSION=$(cat .weave-docs-version)
          echo "Last generated version: $LAST_VERSION"
          echo "Current version: $VERSION"
          
          if [ "$LAST_VERSION" == "$VERSION" ]; then
            echo "Documentation already generated for version $VERSION"
            echo "skip_generation=true" >> $GITHUB_OUTPUT
          else
            echo "Documentation needs to be regenerated"
            echo "skip_generation=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "No previous version found, will generate documentation"
          echo "skip_generation=false" >> $GITHUB_OUTPUT
        fi
        
        # Save the version for next time
        echo "$VERSION" > .weave-docs-version
        
    - name: Generate Service API Documentation
      if: steps.version-check.outputs.skip_generation != 'true'
      run: |
        echo "Generating Service API documentation..."
        python scripts/reference-generation/generate_service_api_spec.py
        
    - name: Generate Python SDK Documentation
      if: steps.version-check.outputs.skip_generation != 'true'
      run: |
        echo "Generating Python SDK documentation..."
        # Use version from PR description for push triggers, or workflow input
        if [ "${{ github.event_name }}" == "push" ]; then
          VERSION="${{ steps.parse-pr.outputs.weave_version }}"
        else
          VERSION="${{ github.event.inputs.weave_version }}"
        fi
        echo "Using Weave version: ${VERSION:-latest}"
        
        # Create isolated environment for Python SDK generation
        python -m venv venv_python
        source venv_python/bin/activate
        pip install requests lazydocs
        python scripts/reference-generation/generate_python_sdk_docs.py "${VERSION:-latest}"
        deactivate
        rm -rf venv_python
        
    - name: Generate TypeScript SDK Documentation  
      if: steps.version-check.outputs.skip_generation != 'true'
      run: |
        echo "Generating TypeScript SDK documentation..."
        # Use version from PR description for push triggers, or workflow input
        if [ "${{ github.event_name }}" == "push" ]; then
          VERSION="${{ steps.parse-pr.outputs.weave_version }}"
        else
          VERSION="${{ github.event.inputs.weave_version }}"
        fi
        echo "Using Weave version: ${VERSION:-latest}"
        
        # Create isolated environment for TypeScript SDK generation
        python -m venv venv_typescript
        source venv_typescript/bin/activate
        pip install requests
        python scripts/reference-generation/generate_typescript_sdk_docs.py "${VERSION:-latest}"
        deactivate
        rm -rf venv_typescript
        
    - name: Fix broken links
      if: steps.version-check.outputs.skip_generation != 'true'
      run: |
        echo "Fixing broken links in documentation..."
        python scripts/reference-generation/fix_broken_links.py
        
    - name: Create Pull Request
      if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.create_pr == 'true' }}
      uses: peter-evans/create-pull-request@v6
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "chore: Update reference documentation (Weave ${{ github.event.inputs.weave_version || 'latest' }})"
        title: "Update reference documentation (Weave ${{ github.event.inputs.weave_version || 'latest' }})"
        body: |
          This PR updates the reference documentation for Weave.
          
          **Version**: ${{ github.event.inputs.weave_version || 'latest' }}
          **Generated on**: ${{ github.event.repository.updated_at }}
          
          ### Changes
          - Updated Service API documentation from OpenAPI spec
          - Regenerated Python SDK documentation using lazydocs
          - Regenerated TypeScript SDK documentation using typedoc
          - Fixed internal cross-reference links
          
          ### Notes
          - Documentation generation runs in isolated environments
          - All dependencies are development-only and not included in the repository
          - Please review the changes before merging
        branch: update-reference-docs-${{ github.run_number }}
        delete-branch: true
        labels: |
          documentation
          automated
    
    # For push events (testing only), commit the changes back
    - name: Commit changes (push trigger)
      if: ${{ github.event_name == 'push' }}
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add -A
        if git diff --staged --quiet; then
          if [ "${{ steps.version-check.outputs.skip_generation }}" == "true" ]; then
            VERSION="${{ steps.parse-pr.outputs.weave_version }}"
            echo "Skipped regeneration - documentation already up to date for Weave ${VERSION}"
          else
            echo "No changes to commit"
          fi
        else
          VERSION="${{ steps.parse-pr.outputs.weave_version }}"
          git commit -m "test: Auto-generated reference documentation (Weave ${VERSION})"
          git push
        fi

